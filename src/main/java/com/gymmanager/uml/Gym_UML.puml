@startuml GymManager Class Diagram

' Entities
class Person {
  -id: Long
  -name: String
  -email: String
  -phone: String
  +Person()
  +Person(name: String, email: String, phone: String)
  +Getters and Setters()
}

class Member {
  -membershipNumber: String
  -joinDate: LocalDate
  +Member()
  +Member(name: String, email: String, phone: String, membershipNumber: String, joinDate: LocalDate)
  +Getters and Setters()
}

class GymClass {
  -id: Long
  -className: String
  -description: String
  -schedule: LocalDateTime
  -duration: int
  -capacity: int
  -instructor: String
  +GymClass()
  +GymClass(className: String, description: String, schedule: LocalDateTime, duration: int, capacity: int, instructor: String)
  +Getters and Setters()
}

' Repository Interfaces
interface MemberRepository {
  +save(member: Member): Member
  +findById(id: Long): Optional<Member>
  +findAll(): List<Member>
  +delete(id: Long): void
  +existsById(id: Long): boolean
  +findByMembershipNumber(membershipNumber: String): Optional<Member>
}

interface ClassRepository {
  +save(gymClass: GymClass): GymClass
  +findById(id: Long): Optional<GymClass>
  +findAll(): List<GymClass>
  +delete(id: Long): void
  +existsById(id: Long): boolean
  +findByInstructor(instructor: String): List<GymClass>
  +findByClassName(className: String): List<GymClass>
}

interface EnrollmentRepository {
  +enrollMember(memberId: Long, classId: Long): boolean
  +cancelEnrollment(memberId: Long, classId: Long): boolean
  +isEnrolled(memberId: Long, classId: Long): boolean
  +findEnrolledClasses(memberId: Long): List<GymClass>
  +findEnrolledMembers(classId: Long): List<Member>
  +getEnrollmentCount(classId: Long): int
}

' Service Interfaces
interface MemberService {
  +registerMember(member: Member): Member
  +getMember(id: Long): Optional<Member>
  +getAllMembers(): List<Member>
  +updateMember(member: Member): Member
  +deleteMember(id: Long): void
  +findByMembershipNumber(membershipNumber: String): Optional<Member>
}

interface ClassService {
  +createClass(gymClass: GymClass): GymClass
  +getClass(id: Long): Optional<GymClass>
  +getAllClasses(): List<GymClass>
  +updateClass(gymClass: GymClass): GymClass
  +deleteClass(id: Long): void
  +findByInstructor(instructor: String): List<GymClass>
  +findByClassName(className: String): List<GymClass>
}

interface EnrollmentService {
  +enrollMember(memberId: Long, classId: Long): boolean
  +cancelEnrollment(memberId: Long, classId: Long): boolean
  +isEnrolled(memberId: Long, classId: Long): boolean
  +getEnrolledClasses(memberId: Long): List<GymClass>
  +getEnrolledMembers(classId: Long): List<Member>
  +getAvailableClasses(): List<GymClass>
  +getClassAvailability(classId: Long): int
}

' Implementation Relationships
MemberRepositoryImpl ..|> MemberRepository
ClassRepositoryImpl ..|> ClassRepository
EnrollmentRepositoryImpl ..|> EnrollmentRepository

MemberServiceImpl ..|> MemberService
ClassServiceImpl ..|> ClassService
EnrollmentServiceImpl ..|> EnrollmentService

' Dependencies
MemberServiceImpl --> MemberRepository
ClassServiceImpl --> ClassRepository
EnrollmentServiceImpl --> EnrollmentRepository
EnrollmentServiceImpl --> MemberRepository
EnrollmentServiceImpl --> ClassRepository

' Inheritance
Member --|> Person

' UI Layer
class GymApp {
  -memberService: MemberService
  -classService: ClassService
  -enrollmentService: EnrollmentService
  +main(args: String[]): void
  +start(primaryStage: Stage): void
  +showMainMenu(): void
  +showMemberManagement(): void
  +showClassManagement(): void
  +showEnrollmentManagement(): void
}

' UI Dependencies
GymApp --> MemberService
GymApp --> ClassService
GymApp --> EnrollmentService

@enduml